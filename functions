<#
. SYNOPSIS
Functions to execute diferents actions.
. DESCRIPTION
Functions to execute diferents actions.
1.- SvrProcesoActivos - Show us the active proccess
2.- SvrEventLog -Show us the first 5 Event error from Application of servers send from a file .txt load in a principal program ( TareasDiarias.PS1) if the server has a error send a message in .txt error file.
3.- SvrHotfix  - Show us the first 5 updates of servers send from a file .txt load in a principal program ( tareasDiarias.ps1 ) if the server return a error send a message in .txt error file
4.- SvrAntivirus - This function search the last uptime antivirus date, if the date have 5 diferents days of the actually date ask the operating system (in diferents operating system the process are diferent)
			and execute the update depending of operating system, and do the same with the last Scan.
5.- Get-UpTime - Show us the last boot uptime of the servers send from a file .txt load in a pricnipal program ( TareasDiadrias.ps1 ) 
6.- Get-DiskSpace -Show us the disks, size and %free of the servers send from a file .txt load in a pricnipal program ( TareasDiadrias.ps1 ) 
. PARAMETER ComputerName
Name or names from machines. Default Value: Localhost. This is for the Function to view the active process
. EXAMPLE
Get-Service -ComputerName Server01 |Where-Object {$_.Status -eq "Running"}|Out-GridView
Show us the active proccess

. EXAMPLE
Get-WinEvent -ComputerName Server01 -LogName Application |Where-Object {$_.leveldisplayname -eq "Error"} |select @{Label='Equipo';Expression= "MachineName"},
          @{label='Fecha Creación';expression="TimeCreated"},@{label='ID';expression="Id"},@{label='Mensaje del Error';expression="Message"} -First 5
Show us the first 5 Event error from Application of server Server01.

. EXAMPLE
Get-HotFix -ComputerName Server01 |select @{label='Equipo';expression="PsComputerName"},@{label='Descripción';expression="Description"}, HotFixID, InstalledOn -First 5
Show us the first 5 updates of server Server01

. EXAMPLE
Get-MpComputerStatus -CimSession Server01 |select @{label='Equipo';expression='PSComputerName'},@{label='Antivirus Enabled';expression='AntivirusEnabled'}, 
                    @{label='Version';expression='AntivirusSignatureVersion'}, @{label='Fecha Actualizacion';expression='NISSignatureLastUpdated'},
                    @{label='Fecha last Scaned';expression='FullScanEndTime'}

. EXAMPLE
Get-WmiObject -class win32_OperatingSystem -computername Server01 | select @{label="equipo";expression={$_.__server}},@{label="time";expression = {$_.converttodatetime($_.lastbootuptime)}}
Show us the last boot uptime of the server Server01 and convert the date in date time format. 

. EXAMPLE
Get-WmiObject -Class win32_volume -computername Server01 | Select-Object @{LABEL='Equipo';EXPRESSION={$_.__server}}, driveletter, label,  
        @{LABEL='GBfreespace';EXPRESSION={"{0:N2}" -f ($_.freespace/1GB)}}, @{LABEL='GBtotal';EXPRESSION={"{0:N2}" -f ($_.Capacity/1GB)}} 
Show us the disks, size and %free of the server Server01

#>
$fichero = 'C:\temp\servers_Prueba.txt'
$servers = Get-Content $fichero
$anterior =(Get-Date).AddDays(-1)


Function SvrProcesosActivos{
parameter (Mandatory=$true)
[String] $servidor = "localhost"
Get-Service -ComputerName $servidor |Where-Object {$_.Status -eq "Running"}|Out-GridView
}

Function SvrEventLog
{
     Foreach ($s in $servers)  
        {
        try{
        Write-Verbose "Eventos del servidor $s"
        Get-WinEvent -ComputerName $s -LogName Application -Credential $Credentials|Where-Object {$_.leveldisplayname -eq "Error"} |select @{Label='Equipo';Expression= "MachineName"},
          @{label='Fecha Creación';expression="TimeCreated"},@{label='ID';expression="Id"},@{label='Mensaje del Error';expression="Message"} -First 5 -ErrorAction Stop
            }
    catch {
    "No se pudieron sacar los eventos del servidor $s" | Out-File c:\Temp\SizeHD_Restart_Event\(get-date -Format yyyyMMdd)erroresEventos.txt -Append
    } 
     }
}
    
Function SvrHotfix
    {
        Foreach ($s in $servers)  
        {
        Try {
        Write-Verbose "Actualizaciones del servidor $s"
        Get-HotFix -ComputerName $s -Credential $Credentials |select @{label='Equipo';expression="PsComputerName"},@{label='Descripción';expression="Description"}, 
		HotFixID, InstalledOn -First 5 -ErrorAction Stop
            }
        catch {
        "No se pudieron sacar las actualizaciones del servidor $s" | Out-File c:\Temp\SizeHD_Restart_Event\(get-date -Format yyyyMMdd)erroresActualizaciones.txt -Append
        }
        }
    }
Function SvrAntivirus
    {
        $dia = $anterior.Day
        $mes= $anterior.Month
        $year= $anterior.Year
        $consulta = "$year/$mes/$dia"
        Foreach ($s in $servers)  
            {
            Write-Verbose "Antivirus en el servidor $s"
		Try{
            $SO = Get-WmiObject win32_operatingsystem -ComputerName $s -Credential $Credentials -Property * |select caption -ErrorAction Stop
            if (($SO.caption -eq "Microsoft Windows Server 2016 Standard")  -or ($SO.caption -eq "Microsoft Windows Server 2012 R2 Standard")){
                Get-MpComputerStatus -CimSession $s |select @{label='Equipo';expression='PSComputerName'},@{label='Antivirus Enabled';expression='AntivirusEnabled'}, 
                    @{label='Version';expression='AntivirusSignatureVersion'}, @{label='Fecha Actualizacion';expression='NISSignatureLastUpdated'},
                    @{label='Fecha last Scaned';expression='FullScanEndTime'}
                $antivirusupdate = get-mpcomputerstatus -CimSession $s
                $diaupdate = $antivirusupdate.AntivirusSignatureLastUpdated.Day
                $mesupdate = $antivirusupdate.AntivirusSignatureLastUpdated.Month
                $yearupdate = $antivirusupdate.AntivirusSignatureLastUpdated.Year
                $results ="$diaupdate/$mesupdate/$yearupdate"
                $diaupdate =$antivirusupdate.QuickScanEndTime.Day
                $mesupdate = $antivirusupdate.QuickScanEndTime.Month
                $yearupdate = $antivirusupdate.QuickScanEndTime.Year
                $results2 = "$diaupdate/$mesupdate/$yearupdate"
		$sesion = New-PSSession -ComputerName $s -Credential $Credentials
                 if ($results -lt $consulta){
                    Enter-PSSession $sesion  
                    update-mpsignature
		    Exit-PSSession
                    }
                if ($results2 -lt $consulta){
			Enter-PSSession $sesion
			Start-MpScan -ScanType QuickScan
			Exit-PSSession
			} 
                }Else {
                if (($SO.caption -eq "Microsoft Windows Server 2008 R2 Standard") -or ($SO.caption -eq "Microsoft Windows Server 2008 R2 Enterprise")){
                    $sesion = New-PSSession -ComputerName $s -Credential $Credentials
                    Try {
                    Enter-PSSession $sesion -ErrorAction Stop
                    cd "\Program Files\Windows Defender\"
                    msascui.exe -update
                    msascui.exe -quickscan
                    Exit-PSSession 
                    }
                    catch{
			Enter-PSSession $sesion
                    	cd "\Program Files\Microsoft Security Client"
                    	msseces.exe -update 
                    	Exit-PSSession
                    catch {"El equipo $s ha dado error al actualizar y ejecutar el antivirus."|our-file $guardarAntivirus -app}}
                    } Else{"Es un windows $SO que no podemos ejecutar el comando, es necesario otro comando." | 
                    Out-File $guardarAntivirus -Append}
    }
                Remove-PSSession $sesion
    }catch{"El equipo $s ha dado error al capturar el sistema operativo"|our-file $guardarAntivirus -app}
    } #End function
    }

  Function Get-UpTime 
{
    $User = 'domain\UserAdministrator'
    $Pass = cat C:\temp\SecurePassword.txt | ConvertTo-SecureString
    $Cred = New-object -TypeName System.Management.Automation.PSCredential -ArgumentList $User,$Pass
Foreach ($s in $servers)  
{ 
try { 
 $os = Get-WmiObject -class win32_OperatingSystem -computername Server01 -credential $credentials
 New-Object psobject -Property @{computer=$s; 
   uptime = $os.ConvertToDateTime($os.lastbootuptime)
   }
   }
    catch {
    $error = "No se pudieron sacar el ultimo reinicio del servidor $s" | Out-File c:\Temp\SizeHD_Restart_Event\(get-date -Format yyyyMMdd)erroresReinicio.txt -Append
    } 
    } #end foreach $s     
  }
  
  
    
 
Function Get-DiskSpace 
{ 
  Foreach ($s in $servers)  
   { 
   Try{ 
	 Write-Host "Se lanza consulta de volumenes al servidor $s"
     Get-WmiObject -Class win32_volume -ComputerName $s -credential $Credentials | 
        Select-Object @{LABEL='Equipo';EXPRESSION={$s}}, 
        driveletter, label,  
        @{LABEL='GBfreespace';EXPRESSION={"{0:N2}" -f ($_.freespace/1GB)}}, @{LABEL='GBtotal';EXPRESSION={"{0:N2}" -f ($_.Capacity/1GB)}} 
        }
    catch {
    $error = "No se pudieron sacar el tamaño de los discos del servidor $s" | Out-File c:\Temp\SizeHD_Restart_Event\(get-date -Format yyyyMMdd)erroresHDSpace.txt -Append
    }
    } #end foreach $s 
    } #End function
